//============================================================================
// Name        : FluidPropLib.cpp
// Author      : Norbert Grunwald
// Version     : 0.0.0
// Created on  : Aug. 01 2017
// Description : A proposal for a Material Library for OGS
//============================================================================

#include <iostream>
#include <vector>
#include <string>

#include "mpPhase.h"

int main() {

	// Pre-processing:
	// ==============
	// The materials are specified according to the XML-tree
	// that has been generated by parsing the prj-file.

//  cPhase solid (configObject);
	// not available yet... :-(

	cPhase solid;
	solid.addComponent(new CustomComponent);

	// e.g. sandstone, no derived class for that component
	// solid is a single-component material. All of its properties are
	// directly obtained from the component. The functions which return
	// the phase properties simply forward the component properties through.

	solid.addFunctionToLastComponent(density, "BilinearJT");
	solid.addFunctionToLastComponent(effective_stess, "LinearEps");
	solid.addFunctionToLastComponent(heat_capacity, "constant");
	solid.addFunctionToComponent(thermal_conductivity, "constant", 0);
	// However, the component has to be supplied with appropriate
	// property functions..

	solid.addConstantPropertyToLastComponent(heat_capacity, 712.54);
	solid.addConstantPropertyToLastComponent(thermal_conductivity, 2.45);
	// ..as well as constant properties..

	solid.addMaterialConstantToLastComponent(reference_temperature, 270.);
	solid.addMaterialConstantToLastComponent(reference_density, 2098.45);
	solid.addMaterialConstantToLastComponent(drho_by_dJ, 1.003);
	solid.addMaterialConstantToLastComponent(drho_by_dT, -0.025);
	// .. and some material constants.

	// For specific substances, constants and properties can predefined in
	// in the derived constructors. Custom substance properties are set using
	// this methods. Predefined specific substance properties can be changed
	// by this methods as well.

	solid.addFunction(density ,"forward");
	solid.addFunction(effective_stess ,"forward");
	solid.addFunction(heat_capacity ,"forward");
	solid.addFunction(thermal_conductivity ,"forward");
	// Ideally, these forward-functions could be the default implementation
	// of cFunction::getValue, but this might be difficult (?)
	// In this case, there is no need to add those functions to the phase,
	// the cPhase constructor would do this for us. In fact, the call of
	// cPhase::addCoponent could be omitted as well for single-component-
	// phases since the constructor could do that job.


	VariableArray vars;

	vars[VariableName::p_G] = 1.01e5; // gas phase pressure
	vars[VariableName::p_c] = 7.0e3; // capillary pressure
	vars[VariableName::T] = 301.; // equilibrium absolute temperature
	vars[VariableName::u_x] = 0.6; // displacement x component
	vars[VariableName::u_y] = 0.2; // displacement y component
	vars[VariableName::u_z] = 0.0; // displacement z component
	vars[VariableName::xn_CG] = 0.9; // x_WL
	vars[VariableName::xn_WL] = 0.9; // x_CG
	// todo: Instead of using an array of doubles vor the variables, we could
	// use a custom array containing both scalars, vectors, tensors and arrays
	// of arbitrary size. This may become handy for variable fields that have
	// to be as large as the component vector..


	std::cout << "Density: " << solid.getValue(density, vars) << "\n";
	std::cout << "Heat Capacity: " << solid.getValue(heat_capacity, vars) << "\n";
	std::cout << "Thermal conductivity: " << solid.getValue(thermal_conductivity, vars) << "\n";


	cPhase gas;

	gas.addComponent("Water");
	gas.addFunctionToLastComponent(viscosity, "Viscosity_IAPWS");
	gas.addComponent(new CarbonDioxide);
	gas.addFunctionToLastComponent(viscosity, "Viscosity_CO2_Fenghour");

	gas.addFunction (density, "PengRobinsonBinary");
	gas.addFunction (viscosity, "Buddenberg_Wilke");
	gas.addMaterialConstant(interaction_parameter, 7.0e-5); // diffusion coefficient for H20-CO2 (g)


	gas.getValue(density, vars);
	gas.getValue(viscosity, vars);


	cPhase liquid;

	liquid.addComponent("Water");
	liquid.addComponent("Salt");
	liquid.addComponent("CO2");

	liquid.addFunction(density, "Custom_H2O_CO2_NaCl_EOS");
	liquid.addFunction(viscosity, "Viscosity_brine_CO2");



	/*Todo:
	 * open questions:
	 *  - Is this Lib suitable for reactive transport (10s of components,
	 *    complex reaction equations,...)
	 *  - Configuration interface (std::string, XML-tree?)
	 *  - VariableContainer (struct of different data types) instead of
	 *    a container of doubles
	 *  - Continuum class, where an array of phases is predefined
	 *  - default-class for average function
	 *  ...
	 */


	return 0;
}
